/**
 * Generated by @openapi-codegen
 *
 * @version 1.0
 */
import * as reactQuery from '@tanstack/react-query';
import { useApiContext, ApiContext } from './apiContext';
import type * as Fetcher from './apiFetcher';
import { apiFetch } from './apiFetcher';
import type * as Schemas from './apiSchemas';

export type AppControllerGetHelloError = Fetcher.ErrorWrapper<undefined>;

export type AppControllerGetHelloVariables = ApiContext['fetcherOptions'];

export const fetchAppControllerGetHello = (
  variables: AppControllerGetHelloVariables,
  signal?: AbortSignal,
) =>
  apiFetch<undefined, AppControllerGetHelloError, undefined, {}, {}, {}>({
    url: '/',
    method: 'get',
    ...variables,
    signal,
  });

export const useAppControllerGetHello = <TData = undefined,>(
  variables: AppControllerGetHelloVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, AppControllerGetHelloError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<undefined, AppControllerGetHelloError, TData>({
    queryKey: queryKeyFn({
      path: '/',
      operationId: 'appControllerGetHello',
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchAppControllerGetHello({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type UserControllerMeQueryParams = {
  relations?: Schemas.UserRelationsDto;
};

export type UserControllerMeError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Schemas.GenericErrorDto;
}>;

export type UserControllerMeVariables = {
  queryParams?: UserControllerMeQueryParams;
} & ApiContext['fetcherOptions'];

export const fetchUserControllerMe = (
  variables: UserControllerMeVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.UserDto,
    UserControllerMeError,
    undefined,
    {},
    UserControllerMeQueryParams,
    {}
  >({ url: '/user/me', method: 'get', ...variables, signal });

export const useUserControllerMe = <TData = Schemas.UserDto,>(
  variables: UserControllerMeVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.UserDto, UserControllerMeError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.UserDto, UserControllerMeError, TData>({
    queryKey: queryKeyFn({
      path: '/user/me',
      operationId: 'userControllerMe',
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchUserControllerMe({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type UserControllerFindOnePathParams = {
  id: string;
};

export type UserControllerFindOneQueryParams = {
  relations?: Schemas.UserRelationsDto;
};

export type UserControllerFindOneError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Schemas.GenericErrorDto;
}>;

export type UserControllerFindOneVariables = {
  pathParams: UserControllerFindOnePathParams;
  queryParams?: UserControllerFindOneQueryParams;
} & ApiContext['fetcherOptions'];

export const fetchUserControllerFindOne = (
  variables: UserControllerFindOneVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.UserDto,
    UserControllerFindOneError,
    undefined,
    {},
    UserControllerFindOneQueryParams,
    UserControllerFindOnePathParams
  >({ url: '/user/{id}', method: 'get', ...variables, signal });

export const useUserControllerFindOne = <TData = Schemas.UserDto,>(
  variables: UserControllerFindOneVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.UserDto,
      UserControllerFindOneError,
      TData
    >,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    Schemas.UserDto,
    UserControllerFindOneError,
    TData
  >({
    queryKey: queryKeyFn({
      path: '/user/{id}',
      operationId: 'userControllerFindOne',
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchUserControllerFindOne({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type QueryOperation =
  | {
      path: '/';
      operationId: 'appControllerGetHello';
      variables: AppControllerGetHelloVariables;
    }
  | {
      path: '/user/me';
      operationId: 'userControllerMe';
      variables: UserControllerMeVariables;
    }
  | {
      path: '/user/{id}';
      operationId: 'userControllerFindOne';
      variables: UserControllerFindOneVariables;
    };
